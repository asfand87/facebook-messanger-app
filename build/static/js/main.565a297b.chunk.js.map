{"version":3,"sources":["component/Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","color","variant","conponent","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","setUsername","messages","setMessage","useEffect","prompt","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","src","alt","class","FormControl","Input","placeholder","onChange","event","target","value","type","IconButton","disabled","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"0VA+BeA,G,MAxBCC,sBAAY,WAAsBC,GAAS,IAA7BC,EAA4B,EAA5BA,QACpBC,EADgD,EAAnBC,WACPF,EAAQE,SAMpC,OACI,yBAAKH,IAAKA,EAAKI,UAAWF,EAAQ,gBAAgB,WAClD,kBAACG,EAAA,EAAD,CAAMD,UAAWF,EAAS,oBAAsB,kBAC5C,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,MAAQ,QACRC,QAAU,KACVC,UAAW,OAEbR,GAAD,UAAcD,EAAQE,UAAY,gBAAlC,KAAsDF,EAAQA,gB,iBCT9DU,EAZIC,IAASC,cAAc,CACxCC,OAAQ,0CACRC,WAAY,iDACZC,YAAa,wDACbC,UAAW,iCACXC,cAAe,6CACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGMC,Y,iCCqEVC,MAvEf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGmBF,mBAAS,IAH5B,mBAGNrB,EAHM,KAGIwB,EAHJ,OAIkBH,mBAAS,CACtC,CACEvB,QAAUwB,EACVtB,SAAWA,KAPF,mBAINyB,EAJM,KAIIC,EAJJ,KAqCb,OA3BAC,qBAAU,WACRH,EAAYI,OAAO,8BAClB,IAGHD,qBAAU,WACRnB,EAAGqB,WAAW,YAAYC,QAAQ,YAAY,QAAQC,YAAW,SAACC,GAChEN,EAAWM,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAG,CAACC,GAAID,EAAIC,GAAItC,QAASqC,EAAIE,iBAG/D,IAkBA,yBAAKpC,UAAU,OACf,yBAAKqC,IAAI,4FAA4FC,IAAI,KACxG,uCAAY,8BAAOvC,GAAnB,iCACA,0BAAMwC,MAAM,aACX,kBAACC,EAAA,EAAD,CAAaxC,UAAU,oBACrB,kBAACyC,EAAA,EAAD,CAAOzC,UAAU,aAAa0C,YAAY,kBAAkBC,SAAU,SAAAC,GAAK,OAAEtB,EAASsB,EAAMC,OAAOC,QAAQC,KAAK,OAAOD,MAAOzB,IAE9H,kBAAC2B,EAAA,EAAD,CAAYhD,UAAY,kBACxBK,QAAQ,YAAYD,MAAM,UAAU6C,UAAW5B,EAAO6B,QArBxC,SAACN,GACnBA,EAAMO,iBACN5C,EAAGqB,WAAW,YAAYwB,IAAI,CAC5BvD,QAAUwB,EACVtB,SAAWA,EACXsD,UAAW7C,IAASU,UAAUoC,WAAWC,oBAI3CjC,EAAS,MAcL,kBAAC,IAAD,SAKF,kBAAC,IAAD,KAGEE,EAASS,KAAI,gBAAEE,EAAF,EAAEA,GAAGtC,EAAL,EAAKA,QAAL,OACX,kBAAC,EAAD,CACE2D,IAAOrB,EACPtC,QAAWA,EACXE,SAAYA,UC3DJ0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM7E,c","file":"static/js/main.565a297b.chunk.js","sourcesContent":["// forwardref is used in react-flip-move and it tracks how the items are moving.\r\nimport React, {forwardRef } from 'react';\r\nimport { Typography,CardContent, Card } from '@material-ui/core';\r\nimport \"./Message.css\"\r\n\r\n// we are wrapping Message in forward ref so we can track how the items are flipping so then\r\n// we have access to ref which is underneath here...\r\nconst Message = forwardRef (({message, username}, ref) => {\r\n    const isUser = username === message.username;\r\n    // can be written as following.\r\n    // <Card className={`message${isUser && 'message__user'}`}>\r\n\r\n\r\n            // !! so we attach ref underneath.\r\n    return (\r\n        <div ref={ref} className={isUser? \"message__user\":\"message\"}>\r\n        <Card className={isUser ? \"message__userCard\" : \"message__guest\"}>\r\n            <CardContent>\r\n                <Typography\r\n                    color = \"white\"\r\n                    variant = \"h5\"\r\n                    conponent =\"h2\"  \r\n                >                  \r\n                {!isUser && `${message.username || \"Unknkown User\"}:`}{message.message}\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default Message\r\n","import firebase from \"firebase\";\r\n\r\nconst  firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyA9TULqDsSu4Hhae6r3xhjJhHlhAsmUI-s\",\r\n    authDomain: \"facebook-messanger-clone-db375.firebaseapp.com\",\r\n    databaseURL: \"https://facebook-messanger-clone-db375.firebaseio.com\",\r\n    projectId: \"facebook-messanger-clone-db375\",\r\n    storageBucket: \"facebook-messanger-clone-db375.appspot.com\",\r\n    messagingSenderId: \"946201443090\",\r\n    appId: \"1:946201443090:web:e9b8118e7d6cc44baa51cb\",\r\n    measurementId: \"G-JC5EEQKXZ3\"\r\n  });\r\n\r\n  const db = firebaseApp.firestore();\r\n  export default db;","import React, {useEffect, useState} from 'react';\nimport {FormControl, Input, InputLabel } from '@material-ui/core';\nimport './App.css';\nimport Message from \"./component/Message\"\nimport db from \"./firebase\";\n// this firebase is from actuall firebase module.\nimport firebase from \"firebase\";\nimport FlipMove from \"react-flip-move\";\nimport SendIcon from '@material-ui/icons/Send';\nimport {IconButton} from '@material-ui/core';\n\nfunction App() {\n\n  const [input, setInput] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [messages, setMessage] = useState([\n    {\n      message : input,\n      username : username,\n    }\n  ]);\n  useEffect(() => {\n    setUsername(prompt(\"please enter your name!\"));\n  }, [])\n\n  // so use effect and onSnapshot both are listeners.\n  useEffect(()=>{\n    db.collection(\"messages\").orderBy(\"timestamp\",\"desc\").onSnapshot((snapshot)=>{\n      setMessage(snapshot.docs.map(doc=>({id: doc.id, message: doc.data()})))\n\n    })\n  },[]);\n  \n  \n\n  // here we are adding it to the database.\n  const sendMessage = (event)=>{\n    event.preventDefault();\n    db.collection(\"messages\").add({\n      message : input,\n      username : username,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    })\n    // following was pushing locally.\n    // setMessage([...messages, {username : username, message:input}])\n    setInput(\"\");\n  };\n  \n  return (\n    <div className=\"App\">\n    <img src=\"https://www.freeiconspng.com/uploads/facebook-messenger-light-blue-logo-1.png?w=100&h=100\" alt=\"\"/>\n     <h1>Welcome <span>{username}</span> to facebook Messanger Clone!</h1>\n     <form class=\"app__form\">\n      <FormControl className=\"app__formControl\">\n        <Input className=\"app__input\" placeholder=\"Enter a message\" onChange={event=>setInput(event.target.value)} type=\"text\" value={input}/>\n\n        <IconButton className = \"app__iconButton\" \n        variant=\"contained\" color=\"primary\" disabled={!input} onClick={sendMessage}\n        >\n        <SendIcon  />\n        </IconButton>\n\n      </FormControl>\n      </form>\n      <FlipMove>\n      \n      {\n        messages.map(({id,message})=>\n          <Message \n            key = {id}\n            message = {message}\n            username = {username}\n          />\n        )\n      }\n      </FlipMove>\n      \n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}